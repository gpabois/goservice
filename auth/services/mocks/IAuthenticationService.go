// Code generated by mockery v2.20.0. DO NOT EDIT.

package mocks

import (
	auth "github.com/gpabois/goservice/auth"

	mock "github.com/stretchr/testify/mock"

	result "github.com/gpabois/gostd/result"
)

// IAuthenticationService is an autogenerated mock type for the IAuthenticationService type
type IAuthenticationService[Subject interface{}] struct {
	mock.Mock
}

type IAuthenticationService_Expecter[Subject interface{}] struct {
	mock *mock.Mock
}

func (_m *IAuthenticationService[Subject]) EXPECT() *IAuthenticationService_Expecter[Subject] {
	return &IAuthenticationService_Expecter[Subject]{mock: &_m.Mock}
}

// Authenticate provides a mock function with given fields: strategy
func (_m *IAuthenticationService[Subject]) Authenticate(strategy auth.AuthenticationStrategy) result.Result[Subject] {
	ret := _m.Called(strategy)

	var r0 result.Result[Subject]
	if rf, ok := ret.Get(0).(func(auth.AuthenticationStrategy) result.Result[Subject]); ok {
		r0 = rf(strategy)
	} else {
		r0 = ret.Get(0).(result.Result[Subject])
	}

	return r0
}

// IAuthenticationService_Authenticate_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Authenticate'
type IAuthenticationService_Authenticate_Call[Subject interface{}] struct {
	*mock.Call
}

// Authenticate is a helper method to define mock.On call
//   - strategy auth.AuthenticationStrategy
func (_e *IAuthenticationService_Expecter[Subject]) Authenticate(strategy interface{}) *IAuthenticationService_Authenticate_Call[Subject] {
	return &IAuthenticationService_Authenticate_Call[Subject]{Call: _e.mock.On("Authenticate", strategy)}
}

func (_c *IAuthenticationService_Authenticate_Call[Subject]) Run(run func(strategy auth.AuthenticationStrategy)) *IAuthenticationService_Authenticate_Call[Subject] {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(auth.AuthenticationStrategy))
	})
	return _c
}

func (_c *IAuthenticationService_Authenticate_Call[Subject]) Return(_a0 result.Result[Subject]) *IAuthenticationService_Authenticate_Call[Subject] {
	_c.Call.Return(_a0)
	return _c
}

func (_c *IAuthenticationService_Authenticate_Call[Subject]) RunAndReturn(run func(auth.AuthenticationStrategy) result.Result[Subject]) *IAuthenticationService_Authenticate_Call[Subject] {
	_c.Call.Return(run)
	return _c
}

type mockConstructorTestingTNewIAuthenticationService interface {
	mock.TestingT
	Cleanup(func())
}

// NewIAuthenticationService creates a new instance of IAuthenticationService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewIAuthenticationService[Subject interface{}](t mockConstructorTestingTNewIAuthenticationService) *IAuthenticationService[Subject] {
	mock := &IAuthenticationService[Subject]{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
