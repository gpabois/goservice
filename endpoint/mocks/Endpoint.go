// Code generated by mockery v2.20.0. DO NOT EDIT.

package mocks

import (
	context "context"

	mock "github.com/stretchr/testify/mock"

	result "github.com/gpabois/gostd/result"
)

// Endpoint is an autogenerated mock type for the Endpoint type
type Endpoint[Request interface{}, Response interface{}] struct {
	mock.Mock
}

type Endpoint_Expecter[Request interface{}, Response interface{}] struct {
	mock *mock.Mock
}

func (_m *Endpoint[Request, Response]) EXPECT() *Endpoint_Expecter[Request, Response] {
	return &Endpoint_Expecter[Request, Response]{mock: &_m.Mock}
}

// Process provides a mock function with given fields: ctx, request
func (_m *Endpoint[Request, Response]) Process(ctx context.Context, request Request) result.Result[Response] {
	ret := _m.Called(ctx, request)

	var r0 result.Result[Response]
	if rf, ok := ret.Get(0).(func(context.Context, Request) result.Result[Response]); ok {
		r0 = rf(ctx, request)
	} else {
		r0 = ret.Get(0).(result.Result[Response])
	}

	return r0
}

// Endpoint_Process_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Process'
type Endpoint_Process_Call[Request interface{}, Response interface{}] struct {
	*mock.Call
}

// Process is a helper method to define mock.On call
//   - ctx context.Context
//   - request Request
func (_e *Endpoint_Expecter[Request, Response]) Process(ctx interface{}, request interface{}) *Endpoint_Process_Call[Request, Response] {
	return &Endpoint_Process_Call[Request, Response]{Call: _e.mock.On("Process", ctx, request)}
}

func (_c *Endpoint_Process_Call[Request, Response]) Run(run func(ctx context.Context, request Request)) *Endpoint_Process_Call[Request, Response] {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(Request))
	})
	return _c
}

func (_c *Endpoint_Process_Call[Request, Response]) Return(_a0 result.Result[Response]) *Endpoint_Process_Call[Request, Response] {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Endpoint_Process_Call[Request, Response]) RunAndReturn(run func(context.Context, Request) result.Result[Response]) *Endpoint_Process_Call[Request, Response] {
	_c.Call.Return(run)
	return _c
}

type mockConstructorTestingTNewEndpoint interface {
	mock.TestingT
	Cleanup(func())
}

// NewEndpoint creates a new instance of Endpoint. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewEndpoint[Request interface{}, Response interface{}](t mockConstructorTestingTNewEndpoint) *Endpoint[Request, Response] {
	mock := &Endpoint[Request, Response]{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
